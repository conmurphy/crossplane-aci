/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VlanPoolObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type VlanPoolParameters struct {

	// +kubebuilder:validation:Required
	AllocMode *string `json:"allocMode" tf:"alloc_mode,omitempty"`

	// +kubebuilder:validation:Optional
	Annotation *string `json:"annotation,omitempty" tf:"annotation,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	NameAlias *string `json:"nameAlias,omitempty" tf:"name_alias,omitempty"`
}

// VlanPoolSpec defines the desired state of VlanPool
type VlanPoolSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VlanPoolParameters `json:"forProvider"`
}

// VlanPoolStatus defines the observed state of VlanPool.
type VlanPoolStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VlanPoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VlanPool is the Schema for the VlanPools API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,acijet}
type VlanPool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VlanPoolSpec   `json:"spec"`
	Status            VlanPoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VlanPoolList contains a list of VlanPools
type VlanPoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VlanPool `json:"items"`
}

// Repository type metadata.
var (
	VlanPool_Kind             = "VlanPool"
	VlanPool_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VlanPool_Kind}.String()
	VlanPool_KindAPIVersion   = VlanPool_Kind + "." + CRDGroupVersion.String()
	VlanPool_GroupVersionKind = CRDGroupVersion.WithKind(VlanPool_Kind)
)

func init() {
	SchemeBuilder.Register(&VlanPool{}, &VlanPoolList{})
}
