/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type L3PathAttachmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type L3PathAttachmentParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Annotation *string `json:"annotation,omitempty" tf:"annotation,omitempty"`

	// +kubebuilder:validation:Optional
	Autostate *string `json:"autostate,omitempty" tf:"autostate,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Encap *string `json:"encap,omitempty" tf:"encap,omitempty"`

	// +kubebuilder:validation:Optional
	EncapScope *string `json:"encapScope,omitempty" tf:"encap_scope,omitempty"`

	// +kubebuilder:validation:Optional
	IPv6Dad *string `json:"ipv6Dad,omitempty" tf:"ipv6_dad,omitempty"`

	// +kubebuilder:validation:Required
	IfInstT *string `json:"ifInstT" tf:"if_inst_t,omitempty"`

	// +kubebuilder:validation:Optional
	LlAddr *string `json:"llAddr,omitempty" tf:"ll_addr,omitempty"`

	// +crossplane:generate:reference:type=L3LogicalInterfaceProfile
	// +kubebuilder:validation:Optional
	LogicalInterfaceProfileDn *string `json:"logicalInterfaceProfileDn,omitempty" tf:"logical_interface_profile_dn,omitempty"`

	// +kubebuilder:validation:Optional
	LogicalInterfaceProfileDnRef *v1.Reference `json:"logicalInterfaceProfileDnRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	LogicalInterfaceProfileDnSelector *v1.Selector `json:"logicalInterfaceProfileDnSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Mac *string `json:"mac,omitempty" tf:"mac,omitempty"`

	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// +kubebuilder:validation:Optional
	Mtu *string `json:"mtu,omitempty" tf:"mtu,omitempty"`

	// +kubebuilder:validation:Required
	TargetDn *string `json:"targetDn" tf:"target_dn,omitempty"`

	// +kubebuilder:validation:Optional
	TargetDscp *string `json:"targetDscp,omitempty" tf:"target_dscp,omitempty"`
}

// L3PathAttachmentSpec defines the desired state of L3PathAttachment
type L3PathAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     L3PathAttachmentParameters `json:"forProvider"`
}

// L3PathAttachmentStatus defines the observed state of L3PathAttachment.
type L3PathAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        L3PathAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// L3PathAttachment is the Schema for the L3PathAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,acijet}
type L3PathAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              L3PathAttachmentSpec   `json:"spec"`
	Status            L3PathAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// L3PathAttachmentList contains a list of L3PathAttachments
type L3PathAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []L3PathAttachment `json:"items"`
}

// Repository type metadata.
var (
	L3PathAttachment_Kind             = "L3PathAttachment"
	L3PathAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: L3PathAttachment_Kind}.String()
	L3PathAttachment_KindAPIVersion   = L3PathAttachment_Kind + "." + CRDGroupVersion.String()
	L3PathAttachment_GroupVersionKind = CRDGroupVersion.WithKind(L3PathAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&L3PathAttachment{}, &L3PathAttachmentList{})
}
