/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type L3OspfInterfaceProfileObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type L3OspfInterfaceProfileParameters struct {

	// +kubebuilder:validation:Optional
	Annotation *string `json:"annotation,omitempty" tf:"annotation,omitempty"`

	// +kubebuilder:validation:Required
	AuthKey *string `json:"authKey" tf:"auth_key,omitempty"`

	// +kubebuilder:validation:Optional
	AuthKeyID *string `json:"authKeyId,omitempty" tf:"auth_key_id,omitempty"`

	// +kubebuilder:validation:Optional
	AuthType *string `json:"authType,omitempty" tf:"auth_type,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +crossplane:generate:reference:type=L3LogicalInterfaceProfile
	// +kubebuilder:validation:Optional
	LogicalInterfaceProfileDn *string `json:"logicalInterfaceProfileDn,omitempty" tf:"logical_interface_profile_dn,omitempty"`

	// +kubebuilder:validation:Optional
	LogicalInterfaceProfileDnRef *v1.Reference `json:"logicalInterfaceProfileDnRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	LogicalInterfaceProfileDnSelector *v1.Selector `json:"logicalInterfaceProfileDnSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	NameAlias *string `json:"nameAlias,omitempty" tf:"name_alias,omitempty"`

	// +kubebuilder:validation:Optional
	RelationOspfRsIfPol *string `json:"relationOspfRsIfPol,omitempty" tf:"relation_ospf_rs_if_pol,omitempty"`
}

// L3OspfInterfaceProfileSpec defines the desired state of L3OspfInterfaceProfile
type L3OspfInterfaceProfileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     L3OspfInterfaceProfileParameters `json:"forProvider"`
}

// L3OspfInterfaceProfileStatus defines the observed state of L3OspfInterfaceProfile.
type L3OspfInterfaceProfileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        L3OspfInterfaceProfileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// L3OspfInterfaceProfile is the Schema for the L3OspfInterfaceProfiles API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,acijet}
type L3OspfInterfaceProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              L3OspfInterfaceProfileSpec   `json:"spec"`
	Status            L3OspfInterfaceProfileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// L3OspfInterfaceProfileList contains a list of L3OspfInterfaceProfiles
type L3OspfInterfaceProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []L3OspfInterfaceProfile `json:"items"`
}

// Repository type metadata.
var (
	L3OspfInterfaceProfile_Kind             = "L3OspfInterfaceProfile"
	L3OspfInterfaceProfile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: L3OspfInterfaceProfile_Kind}.String()
	L3OspfInterfaceProfile_KindAPIVersion   = L3OspfInterfaceProfile_Kind + "." + CRDGroupVersion.String()
	L3OspfInterfaceProfile_GroupVersionKind = CRDGroupVersion.WithKind(L3OspfInterfaceProfile_Kind)
)

func init() {
	SchemeBuilder.Register(&L3OspfInterfaceProfile{}, &L3OspfInterfaceProfileList{})
}
