/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VmmCredentialObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type VmmCredentialParameters struct {

	// +kubebuilder:validation:Optional
	Annotation *string `json:"annotation,omitempty" tf:"annotation,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	NameAlias *string `json:"nameAlias,omitempty" tf:"name_alias,omitempty"`

	// +kubebuilder:validation:Optional
	Pwd *string `json:"pwd,omitempty" tf:"pwd,omitempty"`

	// +kubebuilder:validation:Optional
	Usr *string `json:"usr,omitempty" tf:"usr,omitempty"`

	// +crossplane:generate:reference:type=VmmDomain
	// +kubebuilder:validation:Optional
	VmmDomainDn *string `json:"vmmDomainDn,omitempty" tf:"vmm_domain_dn,omitempty"`

	// +kubebuilder:validation:Optional
	VmmDomainDnRef *v1.Reference `json:"vmmDomainDnRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	VmmDomainDnSelector *v1.Selector `json:"vmmDomainDnSelector,omitempty" tf:"-"`
}

// VmmCredentialSpec defines the desired state of VmmCredential
type VmmCredentialSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VmmCredentialParameters `json:"forProvider"`
}

// VmmCredentialStatus defines the observed state of VmmCredential.
type VmmCredentialStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VmmCredentialObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VmmCredential is the Schema for the VmmCredentials API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,acijet}
type VmmCredential struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VmmCredentialSpec   `json:"spec"`
	Status            VmmCredentialStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VmmCredentialList contains a list of VmmCredentials
type VmmCredentialList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VmmCredential `json:"items"`
}

// Repository type metadata.
var (
	VmmCredential_Kind             = "VmmCredential"
	VmmCredential_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VmmCredential_Kind}.String()
	VmmCredential_KindAPIVersion   = VmmCredential_Kind + "." + CRDGroupVersion.String()
	VmmCredential_GroupVersionKind = CRDGroupVersion.WithKind(VmmCredential_Kind)
)

func init() {
	SchemeBuilder.Register(&VmmCredential{}, &VmmCredentialList{})
}
