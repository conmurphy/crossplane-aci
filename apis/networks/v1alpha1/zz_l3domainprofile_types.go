/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type L3DomainProfileObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type L3DomainProfileParameters struct {

	// +kubebuilder:validation:Optional
	Annotation *string `json:"annotation,omitempty" tf:"annotation,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	NameAlias *string `json:"nameAlias,omitempty" tf:"name_alias,omitempty"`

	// +kubebuilder:validation:Optional
	RelationExtnwRsOut []*string `json:"relationExtnwRsOut,omitempty" tf:"relation_extnw_rs_out,omitempty"`

	// +kubebuilder:validation:Optional
	RelationInfraRsDomVxlanNsDef *string `json:"relationInfraRsDomVxlanNsDef,omitempty" tf:"relation_infra_rs_dom_vxlan_ns_def,omitempty"`

	// +kubebuilder:validation:Optional
	RelationInfraRsVipAddrNs *string `json:"relationInfraRsVipAddrNs,omitempty" tf:"relation_infra_rs_vip_addr_ns,omitempty"`

	// +crossplane:generate:reference:type=VlanPool
	// +kubebuilder:validation:Optional
	RelationInfraRsVlanNs *string `json:"relationInfraRsVlanNs,omitempty" tf:"relation_infra_rs_vlan_ns,omitempty"`

	// +kubebuilder:validation:Optional
	RelationInfraRsVlanNsDef *string `json:"relationInfraRsVlanNsDef,omitempty" tf:"relation_infra_rs_vlan_ns_def,omitempty"`

	// +kubebuilder:validation:Optional
	RelationInfraRsVlanNsRef *v1.Reference `json:"relationInfraRsVlanNsRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	RelationInfraRsVlanNsSelector *v1.Selector `json:"relationInfraRsVlanNsSelector,omitempty" tf:"-"`
}

// L3DomainProfileSpec defines the desired state of L3DomainProfile
type L3DomainProfileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     L3DomainProfileParameters `json:"forProvider"`
}

// L3DomainProfileStatus defines the observed state of L3DomainProfile.
type L3DomainProfileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        L3DomainProfileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// L3DomainProfile is the Schema for the L3DomainProfiles API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,acijet}
type L3DomainProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              L3DomainProfileSpec   `json:"spec"`
	Status            L3DomainProfileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// L3DomainProfileList contains a list of L3DomainProfiles
type L3DomainProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []L3DomainProfile `json:"items"`
}

// Repository type metadata.
var (
	L3DomainProfile_Kind             = "L3DomainProfile"
	L3DomainProfile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: L3DomainProfile_Kind}.String()
	L3DomainProfile_KindAPIVersion   = L3DomainProfile_Kind + "." + CRDGroupVersion.String()
	L3DomainProfile_GroupVersionKind = CRDGroupVersion.WithKind(L3DomainProfile_Kind)
)

func init() {
	SchemeBuilder.Register(&L3DomainProfile{}, &L3DomainProfileList{})
}
