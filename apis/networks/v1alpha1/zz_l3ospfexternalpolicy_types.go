/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type L3OspfExternalPolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type L3OspfExternalPolicyParameters struct {

	// +kubebuilder:validation:Optional
	Annotation *string `json:"annotation,omitempty" tf:"annotation,omitempty"`

	// +kubebuilder:validation:Optional
	AreaCost *string `json:"areaCost,omitempty" tf:"area_cost,omitempty"`

	// +kubebuilder:validation:Optional
	AreaCtrl []*string `json:"areaCtrl,omitempty" tf:"area_ctrl,omitempty"`

	// +kubebuilder:validation:Optional
	AreaID *string `json:"areaId,omitempty" tf:"area_id,omitempty"`

	// +kubebuilder:validation:Optional
	AreaType *string `json:"areaType,omitempty" tf:"area_type,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +crossplane:generate:reference:type=L3Outside
	// +kubebuilder:validation:Optional
	L3OutsideDn *string `json:"l3OutsideDn,omitempty" tf:"l3_outside_dn,omitempty"`

	// +kubebuilder:validation:Optional
	L3OutsideDnRef *v1.Reference `json:"l3OutsideDnRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	L3OutsideDnSelector *v1.Selector `json:"l3OutsideDnSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	MultipodInternal *string `json:"multipodInternal,omitempty" tf:"multipod_internal,omitempty"`

	// +kubebuilder:validation:Optional
	NameAlias *string `json:"nameAlias,omitempty" tf:"name_alias,omitempty"`
}

// L3OspfExternalPolicySpec defines the desired state of L3OspfExternalPolicy
type L3OspfExternalPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     L3OspfExternalPolicyParameters `json:"forProvider"`
}

// L3OspfExternalPolicyStatus defines the observed state of L3OspfExternalPolicy.
type L3OspfExternalPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        L3OspfExternalPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// L3OspfExternalPolicy is the Schema for the L3OspfExternalPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,acijet}
type L3OspfExternalPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              L3OspfExternalPolicySpec   `json:"spec"`
	Status            L3OspfExternalPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// L3OspfExternalPolicyList contains a list of L3OspfExternalPolicys
type L3OspfExternalPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []L3OspfExternalPolicy `json:"items"`
}

// Repository type metadata.
var (
	L3OspfExternalPolicy_Kind             = "L3OspfExternalPolicy"
	L3OspfExternalPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: L3OspfExternalPolicy_Kind}.String()
	L3OspfExternalPolicy_KindAPIVersion   = L3OspfExternalPolicy_Kind + "." + CRDGroupVersion.String()
	L3OspfExternalPolicy_GroupVersionKind = CRDGroupVersion.WithKind(L3OspfExternalPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&L3OspfExternalPolicy{}, &L3OspfExternalPolicyList{})
}
