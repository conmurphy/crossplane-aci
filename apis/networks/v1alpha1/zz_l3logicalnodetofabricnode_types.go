/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type L3LogicalNodeToFabricNodeObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type L3LogicalNodeToFabricNodeParameters struct {

	// +kubebuilder:validation:Optional
	Annotation *string `json:"annotation,omitempty" tf:"annotation,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigIssues *string `json:"configIssues,omitempty" tf:"config_issues,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +crossplane:generate:reference:type=L3LogicalNodeProfile
	// +kubebuilder:validation:Optional
	LogicalNodeProfileDn *string `json:"logicalNodeProfileDn,omitempty" tf:"logical_node_profile_dn,omitempty"`

	// +kubebuilder:validation:Optional
	LogicalNodeProfileDnRef *v1.Reference `json:"logicalNodeProfileDnRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	LogicalNodeProfileDnSelector *v1.Selector `json:"logicalNodeProfileDnSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	RtrID *string `json:"rtrId,omitempty" tf:"rtr_id,omitempty"`

	// +kubebuilder:validation:Optional
	RtrIDLoopBack *string `json:"rtrIdLoopBack,omitempty" tf:"rtr_id_loop_back,omitempty"`

	// +kubebuilder:validation:Required
	Tdn *string `json:"tdn" tf:"tdn,omitempty"`
}

// L3LogicalNodeToFabricNodeSpec defines the desired state of L3LogicalNodeToFabricNode
type L3LogicalNodeToFabricNodeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     L3LogicalNodeToFabricNodeParameters `json:"forProvider"`
}

// L3LogicalNodeToFabricNodeStatus defines the observed state of L3LogicalNodeToFabricNode.
type L3LogicalNodeToFabricNodeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        L3LogicalNodeToFabricNodeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// L3LogicalNodeToFabricNode is the Schema for the L3LogicalNodeToFabricNodes API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,acijet}
type L3LogicalNodeToFabricNode struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              L3LogicalNodeToFabricNodeSpec   `json:"spec"`
	Status            L3LogicalNodeToFabricNodeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// L3LogicalNodeToFabricNodeList contains a list of L3LogicalNodeToFabricNodes
type L3LogicalNodeToFabricNodeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []L3LogicalNodeToFabricNode `json:"items"`
}

// Repository type metadata.
var (
	L3LogicalNodeToFabricNode_Kind             = "L3LogicalNodeToFabricNode"
	L3LogicalNodeToFabricNode_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: L3LogicalNodeToFabricNode_Kind}.String()
	L3LogicalNodeToFabricNode_KindAPIVersion   = L3LogicalNodeToFabricNode_Kind + "." + CRDGroupVersion.String()
	L3LogicalNodeToFabricNode_GroupVersionKind = CRDGroupVersion.WithKind(L3LogicalNodeToFabricNode_Kind)
)

func init() {
	SchemeBuilder.Register(&L3LogicalNodeToFabricNode{}, &L3LogicalNodeToFabricNodeList{})
}
