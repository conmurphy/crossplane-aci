/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EpgToContractObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type EpgToContractParameters struct {

	// +kubebuilder:validation:Optional
	Annotation *string `json:"annotation,omitempty" tf:"annotation,omitempty"`

	// +crossplane:generate:reference:type=Epg
	// +kubebuilder:validation:Optional
	ApplicationEpgDn *string `json:"applicationEpgDn,omitempty" tf:"application_epg_dn,omitempty"`

	// +kubebuilder:validation:Optional
	ApplicationEpgDnRef *v1.Reference `json:"applicationEpgDnRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ApplicationEpgDnSelector *v1.Selector `json:"applicationEpgDnSelector,omitempty" tf:"-"`

	// +crossplane:generate:reference:type=Contract
	// +kubebuilder:validation:Optional
	ContractDn *string `json:"contractDn,omitempty" tf:"contract_dn,omitempty"`

	// +kubebuilder:validation:Optional
	ContractDnRef *v1.Reference `json:"contractDnRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ContractDnSelector *v1.Selector `json:"contractDnSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	ContractType *string `json:"contractType" tf:"contract_type,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	MatchT *string `json:"matchT,omitempty" tf:"match_t,omitempty"`

	// +kubebuilder:validation:Optional
	Prio *string `json:"prio,omitempty" tf:"prio,omitempty"`
}

// EpgToContractSpec defines the desired state of EpgToContract
type EpgToContractSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EpgToContractParameters `json:"forProvider"`
}

// EpgToContractStatus defines the observed state of EpgToContract.
type EpgToContractStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EpgToContractObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EpgToContract is the Schema for the EpgToContracts API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,acijet}
type EpgToContract struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EpgToContractSpec   `json:"spec"`
	Status            EpgToContractStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EpgToContractList contains a list of EpgToContracts
type EpgToContractList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EpgToContract `json:"items"`
}

// Repository type metadata.
var (
	EpgToContract_Kind             = "EpgToContract"
	EpgToContract_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EpgToContract_Kind}.String()
	EpgToContract_KindAPIVersion   = EpgToContract_Kind + "." + CRDGroupVersion.String()
	EpgToContract_GroupVersionKind = CRDGroupVersion.WithKind(EpgToContract_Kind)
)

func init() {
	SchemeBuilder.Register(&EpgToContract{}, &EpgToContractList{})
}
