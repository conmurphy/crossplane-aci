/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ContractSubjectObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ContractSubjectParameters struct {

	// +kubebuilder:validation:Optional
	Annotation *string `json:"annotation,omitempty" tf:"annotation,omitempty"`

	// +kubebuilder:validation:Optional
	ConsMatchT *string `json:"consMatchT,omitempty" tf:"cons_match_t,omitempty"`

	// +crossplane:generate:reference:type=Contract
	// +kubebuilder:validation:Optional
	ContractDn *string `json:"contractDn,omitempty" tf:"contract_dn,omitempty"`

	// +kubebuilder:validation:Optional
	ContractDnRef *v1.Reference `json:"contractDnRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ContractDnSelector *v1.Selector `json:"contractDnSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	NameAlias *string `json:"nameAlias,omitempty" tf:"name_alias,omitempty"`

	// +kubebuilder:validation:Optional
	Prio *string `json:"prio,omitempty" tf:"prio,omitempty"`

	// +kubebuilder:validation:Optional
	ProvMatchT *string `json:"provMatchT,omitempty" tf:"prov_match_t,omitempty"`

	// +kubebuilder:validation:Optional
	RelationVzRsSdwanPol *string `json:"relationVzRsSdwanPol,omitempty" tf:"relation_vz_rs_sdwan_pol,omitempty"`

	// +crossplane:generate:reference:type=Filter
	// +kubebuilder:validation:Optional
	RelationVzRsSubjFiltAtt []*string `json:"relationVzRsSubjFiltAtt,omitempty" tf:"relation_vz_rs_subj_filt_att,omitempty"`

	// +kubebuilder:validation:Optional
	RelationVzRsSubjFiltAttRefs []v1.Reference `json:"relationVzRsSubjFiltAttRefs,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	RelationVzRsSubjFiltAttSelector *v1.Selector `json:"relationVzRsSubjFiltAttSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	RelationVzRsSubjGraphAtt *string `json:"relationVzRsSubjGraphAtt,omitempty" tf:"relation_vz_rs_subj_graph_att,omitempty"`

	// +kubebuilder:validation:Optional
	RevFltPorts *string `json:"revFltPorts,omitempty" tf:"rev_flt_ports,omitempty"`

	// +kubebuilder:validation:Optional
	TargetDscp *string `json:"targetDscp,omitempty" tf:"target_dscp,omitempty"`
}

// ContractSubjectSpec defines the desired state of ContractSubject
type ContractSubjectSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ContractSubjectParameters `json:"forProvider"`
}

// ContractSubjectStatus defines the observed state of ContractSubject.
type ContractSubjectStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ContractSubjectObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ContractSubject is the Schema for the ContractSubjects API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,acijet}
type ContractSubject struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ContractSubjectSpec   `json:"spec"`
	Status            ContractSubjectStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ContractSubjectList contains a list of ContractSubjects
type ContractSubjectList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ContractSubject `json:"items"`
}

// Repository type metadata.
var (
	ContractSubject_Kind             = "ContractSubject"
	ContractSubject_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ContractSubject_Kind}.String()
	ContractSubject_KindAPIVersion   = ContractSubject_Kind + "." + CRDGroupVersion.String()
	ContractSubject_GroupVersionKind = CRDGroupVersion.WithKind(ContractSubject_Kind)
)

func init() {
	SchemeBuilder.Register(&ContractSubject{}, &ContractSubjectList{})
}
