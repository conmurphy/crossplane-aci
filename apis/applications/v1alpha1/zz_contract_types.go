/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ContractObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ContractParameters struct {

	// +kubebuilder:validation:Optional
	Annotation *string `json:"annotation,omitempty" tf:"annotation,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Filter []FilterParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// +kubebuilder:validation:Optional
	FilterEntryIds []*string `json:"filterEntryIds,omitempty" tf:"filter_entry_ids,omitempty"`

	// +kubebuilder:validation:Optional
	FilterIds []*string `json:"filterIds,omitempty" tf:"filter_ids,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	NameAlias *string `json:"nameAlias,omitempty" tf:"name_alias,omitempty"`

	// +kubebuilder:validation:Optional
	Prio *string `json:"prio,omitempty" tf:"prio,omitempty"`

	// +kubebuilder:validation:Optional
	RelationVzRsGraphAtt *string `json:"relationVzRsGraphAtt,omitempty" tf:"relation_vz_rs_graph_att,omitempty"`

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	TargetDscp *string `json:"targetDscp,omitempty" tf:"target_dscp,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-aci/apis/root/v1alpha1.Tenant
	// +kubebuilder:validation:Optional
	TenantDn *string `json:"tenantDn,omitempty" tf:"tenant_dn,omitempty"`

	// +kubebuilder:validation:Optional
	TenantDnRef *v1.Reference `json:"tenantDnRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	TenantDnSelector *v1.Selector `json:"tenantDnSelector,omitempty" tf:"-"`
}

type FilterEntryObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type FilterEntryParameters struct {

	// +kubebuilder:validation:Optional
	ApplyToFrag *string `json:"applyToFrag,omitempty" tf:"apply_to_frag,omitempty"`

	// +kubebuilder:validation:Optional
	ArpOpc *string `json:"arpOpc,omitempty" tf:"arp_opc,omitempty"`

	// +kubebuilder:validation:Optional
	DFromPort *string `json:"dFromPort,omitempty" tf:"d_from_port,omitempty"`

	// +kubebuilder:validation:Optional
	DToPort *string `json:"dToPort,omitempty" tf:"d_to_port,omitempty"`

	// +kubebuilder:validation:Optional
	EntryAnnotation *string `json:"entryAnnotation,omitempty" tf:"entry_annotation,omitempty"`

	// +kubebuilder:validation:Optional
	EntryDescription *string `json:"entryDescription,omitempty" tf:"entry_description,omitempty"`

	// +kubebuilder:validation:Optional
	EntryNameAlias *string `json:"entryNameAlias,omitempty" tf:"entry_name_alias,omitempty"`

	// +kubebuilder:validation:Optional
	EtherT *string `json:"etherT,omitempty" tf:"ether_t,omitempty"`

	// +kubebuilder:validation:Required
	FilterEntryName *string `json:"filterEntryName" tf:"filter_entry_name,omitempty"`

	// +kubebuilder:validation:Optional
	Icmpv4T *string `json:"icmpv4T,omitempty" tf:"icmpv4_t,omitempty"`

	// +kubebuilder:validation:Optional
	Icmpv6T *string `json:"icmpv6T,omitempty" tf:"icmpv6_t,omitempty"`

	// +kubebuilder:validation:Optional
	MatchDscp *string `json:"matchDscp,omitempty" tf:"match_dscp,omitempty"`

	// +kubebuilder:validation:Optional
	Prot *string `json:"prot,omitempty" tf:"prot,omitempty"`

	// +kubebuilder:validation:Optional
	SFromPort *string `json:"sFromPort,omitempty" tf:"s_from_port,omitempty"`

	// +kubebuilder:validation:Optional
	SToPort *string `json:"sToPort,omitempty" tf:"s_to_port,omitempty"`

	// +kubebuilder:validation:Optional
	Stateful *string `json:"stateful,omitempty" tf:"stateful,omitempty"`

	// +kubebuilder:validation:Optional
	TCPRules *string `json:"tcpRules,omitempty" tf:"tcp_rules,omitempty"`
}

type FilterObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type FilterParameters struct {

	// +kubebuilder:validation:Optional
	Annotation *string `json:"annotation,omitempty" tf:"annotation,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	FilterEntry []FilterEntryParameters `json:"filterEntry,omitempty" tf:"filter_entry,omitempty"`

	// +kubebuilder:validation:Required
	FilterName *string `json:"filterName" tf:"filter_name,omitempty"`

	// +kubebuilder:validation:Optional
	NameAlias *string `json:"nameAlias,omitempty" tf:"name_alias,omitempty"`
}

// ContractSpec defines the desired state of Contract
type ContractSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ContractParameters `json:"forProvider"`
}

// ContractStatus defines the observed state of Contract.
type ContractStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ContractObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Contract is the Schema for the Contracts API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,acijet}
type Contract struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ContractSpec   `json:"spec"`
	Status            ContractStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ContractList contains a list of Contracts
type ContractList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Contract `json:"items"`
}

// Repository type metadata.
var (
	Contract_Kind             = "Contract"
	Contract_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Contract_Kind}.String()
	Contract_KindAPIVersion   = Contract_Kind + "." + CRDGroupVersion.String()
	Contract_GroupVersionKind = CRDGroupVersion.WithKind(Contract_Kind)
)

func init() {
	SchemeBuilder.Register(&Contract{}, &ContractList{})
}
